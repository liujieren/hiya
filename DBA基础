
一、mysql存储引擎
- Mysql服务软件自带的功能程序，处理表的处理器
功能组建：连接池、sql接口、分析器、优化器、查询缓存、存储引擎、文件系统、管理工具、
默认的存储引擎
- MySQL 5.0/5.1 ---> MyISAM
- MySQL 5.5/5.6 ---> InnoDB
(1)、列出可用的存储引擎类型
- show engines；或show engines\G
(2)、设置默认存储引擎
修改/etc/my.cnf配置文件
[mysqld]
Default-storage——engine=myisam
(3)、myisam村存储引擎
主要特点：支持表级锁，不支持事务、事务回滚、外键
相关的表文件：.frm     .MYI       .MYD
(4)、innodb存储引擎
主要特点：支持行级锁定，支持事务回滚、外键
相关的表文件：.frm、.ibd、ibdata1、ib_logfile0、ib_logfile1
##################################  MYSQL锁机制
        表级锁：一次直接对整张表进行加锁
        行级锁：只锁定某一行
        页级锁：对整个页面（MYSQL管理数据的基本存储单位）进行加锁
     ###锁类型
        读锁（共享锁）：支持并发读
        写锁（互斥锁、排它锁）：是独占锁，上锁期间其他线程不能读表或写表
        show status like "%lock%";     查看当前的锁状态
#################################   事务特性（ACID）
Atomic : 原子性
     事务的整个操作是一个整体，不可分割，要么全部成功，要么全部失败。
Consistency : 一致性
     事务操作的前后，表中的记录没有变化。
Isolation : 隔离性
     事务操作是相互隔离不受影响的。
Durability : 持久性
     数据一旦提交，不可改变，永久改变表数据。
        show variables like "autocommit";     ###查看提交状态
        set autocommit=off;                   ###关闭自动提交    哪个用户设置的那个生效
        rollback;                             ###数据回滚   表格一定是innodb 否则不支持回滚！！！
        commit;                               ###提交数据
 ##########################################################################回滚演示
 create table db3.t4(id int)engine=innodb;    ###创建innodb表
 mysql>select * from db3.t4;
+------+
| id   |
+------+
|  666 |
+------+
mysql>select * from db3.t4;
Empty set (0.00 sec)
mysql> rollback;
Query OK, 0 rows affected (0.04 sec)

mysql> select * from db3.t4;
+------+
| id   |
+------+
|  666 |
+------+
#####################################################查询操作多的表适合使用Myisam存储引擎
        可以节省系统资源
#####################################################写操作多的表适合使用innodb存储引擎
        可以加大并发访问量
##################################################数据导入
二、数据导入导出
（1）、数据导入
mysql> show variables like "secure_file_priv";
[root@client ~]# cp /etc/passwd /var/lib/mysql-files/
在mysql下执行系统命令
Mysql> system ls /etc/passwd
基本用法
- load data infile “目录名/文件名”
Into table 表名 fields terminated by “分隔符” lines terminated by “\n”;

mysql> create table t3( 
    -> name char(50),
    -> password char(1),
    -> uid int(1),
    -> pid int(1),
    -> comment varchar(150),
    -> homedir varchar(100),
    -> shell char(30)
-> );
mysql> load data infile "/var/lib/mysql-files/passwd"
    -> into table t3
    -> fields terminated by ":"
    -> lines terminated by "\n";
mysql> alter table t3 add id int(2) primary key auto_increment first;
#########################  修改导入数据文件的目录
     secure_file_priv=/mydir   ###添加
     chown  mysql /mydir    
     systemctl restart   mysqld
########################  导出数据
     select *  from user into outfile "/mydir/a.txt";    ###导出指定路径，默认以tab分隔符
     select *  from user into outfile "/mydir/b.txt" fields terminated by "-" lines terminated by "\n";  ###指定分隔符
##############################   管理表记录
        格式1 ： 添加1条记录，给所有字段赋值
                insert into 表名 values(字段值列表)；
        格式2 ： 添加N条记录，给所有字段赋值
                insert into 表名
                values
                (字段值列表)，     第一条记录
                （字段值列表），   第二天记录
                .......          .....
###############################  查询表记录
        格式1 ：
                select 字段1，字段N from 表名；
        格式2 ：  
                select 字段1，字段N from 表明
                        where 条件表达式；
###############################  更新表记录
        格式1 ： 更新表内的所有记录
                update 表名
                        set 字段1=字段1值，字段N=字段N值
################################  删除表记录
        格式1 ： 仅删除符合条件的记录
                delete from 表名 where 条件表达式;
        格式2 ： 删除所有表的表记录
                delete from 表名;
#################################   基本匹配条件
        数值比较
                字段类型必须数据数值类型
                =       等于
                >、>=    大于、大于或等于
                <、<=    小于、小于或等于
                ！=      不等于
         字符比较/匹配空/非空
                字符比较时，字段类型必须字符类型
                =               相等
                ！=             不相等
                is null         匹配空
                in not null     非空
        逻辑匹配
                or              逻辑或
                and             逻辑与
                ！              逻辑非
                ()              提高优先级
        范围内匹配/去重显示
                in                         在...里...
                not in                     不在..里...
                between 数字1 and 数字2     在...之间...
                distinct 字段名             去重显示
####################################  高级匹配
        模糊查询
                where 字段名 like ‘通配符’
                _ 匹配单个字符、% 匹配0～N个字符
        正则表达式
                基本用法
                        where 字段名 regexp '正则表达式'
                        正则元字符 ^ $ . [] * |
        四则运算
                运算操作
                        +       加法
                        -       减法
                        *       乘法
                        /       除法
                        %       取余数
##################################  操作查询结果
        聚集函数
                mysql内置数据统计函数
                        avg(字段名)        统计字段平均值
                        sum(字段名)        统计字段之和
                        min(字段名)        统计字段最小
                        max(字段名)        统计字段最大
                        count(字段名)      统计字段值个数
 ##############################   查询结果排序
         基本用法      
                select * from user   
                order by 字段名 [asc|desc];
                        asc 正序排列
                        desc 倒序排列
         查询结果分组
                select * from user
                group by 字段名;
 ###############################  查询结果过滤
        基本用法
                select * from user
                having 条件表达式;
                ##########################
                select * from user
                where 条件
                having  条件表达式;
                #########################
                select * from user
                group by 字段名
                having  条件表达式
#############################   限制查询结果显示行数
        基本用法
                select * from user
                limit N;                显示查询结果前N条记录
                ##################
                select * from user
                limit N,M;              显示指定范围内的查询记录
                ####################
                select * from user
                where 条件查询 limit 3;     显示查询结果前3条记录
                ###################
                select * from user
                where 条件查询  limit 3,3;  从第三条后面开始显示三条
                































