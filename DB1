###搭建数据库服务器
###https://www.cnblogs.com/Anidot/articles/7666909.html  ###相关博客
！！！切记!!!不可用yum卸载有关数据库的服务，用 rpm -e --nodeps
scp /root/桌面/08.dba1/mysql*   root@client:/root
rpm -Uvh mysql-community-*.rpm
systemctl restart mysqld ###首次启动会数据初始化
mysql的默认端口号 3306 
vim /etc/my.cnf  ###无需修改 按默认配置执行即可  内容如下  {
datadir=/var/lib/mysql  ###数据库目录
socket=/var/lib/mysql/mysql.sock  ###
log-error=/var/log/mysqld.log   ###服务的日志文件
pid-file=/var/run/mysqld/mysqld.pid  ###服务的PID
}
###客户端连接数据库服务存储数据
###默认只允许数据服务器访问
###SQK命令 （结构化查询语言）
mysql -hlocalhost -uroot -p'123456'  ###登入
alter user root@"localhost" identified by "qwerDF1234."; ###修改密码
show variables like "%password%";   ###查看有关密码的列表
set global validate_password_policy=0;  ###修改默认值（有0 ， 1 ， 2）
set global validate_password_length=6;  ###密码字符个数的修改
###永久设置  {
vim /etc/my.cnf
validate_password_policy=0
validate_password_length=6
###必须先命令修改完成后才可以修改主配置文件
}
###客户端把数据存储到数据库服务器上的步骤；
1，客户端连接数据库服务器
create databases 库名;         ###创建库的命令
show databases;         ###显示已有的库
use  库名;              ###切换库
select database();     ###显示当前所在库
show  tables;          ###显示已有的表
drop   database  库名;  ###删除库
###数据库的命名规则  {
  不能纯数字
  区分大小写
  不可以使用指令关键字、特殊字符
  }
###创建表(文件)   {
create table 库名.表名（
  字段名   字段类型（宽度） 约束条件,
  );
mysql> create table studen.stuinfo (      ###创建列表 在studen里创建名为stuinfo
    -> name char(20),                     ###名字的字符为20个
    -> age int,                           ###年龄 整数
    -> homeaddr char(50)                  ###家庭地址 字符 50个
    -> );
insert into studen.stuinfo values ("bob",19,"shenzhen"), ("tom",21,"guangzhou");   ###插入表，记录内容
select * from studen.stuinfo;   ###查看内容
update studen.stuinfo set age=18 where name="bob";   ###修改表内容
delete from studen.stuinfo where name="bob";     ###删除表内容bob
ALTER TABLE stuinfo DROP COLUMN homeaddr;     ###删除一整行的列以及结构de
drop table studen;       ###删除表
{
create table 学生表(姓名 char(20),性别 char(6))DEFAULT CHARSET=utf8;   ###设置字符集为中文
insert into 学生表 values("李四","男"),("翠花","女");
select * from 学生表;
+--------+--------+
| 姓名   | 性别   |
+--------+--------+
| 李四   | 男     |
| 翠花   | 女     |
+--------+--------+
}
二、Mysql数据类型
INT、DOUBLE、FLOAT、TINYINT、SMALLINT、MEDIUMINT、BIGINT、unsigned 无符号存储范围
create table t2(age tinyint unsigned,salary float(8,2));
insert into t2 values(18,28000.88);
定长：char，255变长：varchar，65532大文本类型：text/blob 
create table t3(name char(7),location varchar(12)) ;
日期时间类型
Datetime   datestamp date  0001-01-01~9999-12-31  year 1901~2155  time HH:MM:SS
枚举类型
从给定值集合中选择单个值，ENUM
-定义格式：enum（值1，值2，值N）
从给定值集合中选择一个或多个值，set
定义格式：set（值1，值2，值N）
mysql> create table t5(
    -> name char(7),
    -> hobby set("eat","sleep","play"),
    -> sex enum("boy","girl","no")
-> );
###################################################################################################################
########时间函数  {
now()  获取系统当前日期和时间
year() 获取指定时间中的年份
day()  获取指定时间中的日期
sleep(N) 休眠N秒
curdare() 获取当前的系统日期
curtime() 获取当前的系统时刻
month()    获取指定时间中的月份
date()     获取指定时间中的日期
time()     获取指定时间中的时刻
mysql> select curdate(),curtime();
+------------+-----------+
| curdate()  | curtime() |
+------------+-----------+
| 2018-10-16 | 09:11:26  |
+------------+-----------+
}
#########约束条件
Null   允许为空，默认设置
NOT NULL 不允许为空
Key      索引类型
Default   设置默认值，缺省为NULL

create table t9( name char(10) \
not null, age tinyint(2) default 19, likes set("eat","sleep","game","flim") not null default "eat,sleep" );

insert into t9 values("NULL",21,"eat,sleep");
select * from t9;
+------+------+-----------+
| name | age  | likes     |
+------+------+-----------+
| tom  |   19 | eat,sleep |
| bob  |   21 | game,flim |
| NULL |   21 | eat,sleep |
+------+------+-----------+
#################################修改表结构
add   添加字段
modify   修改字段类型
change   修改字段名
drop    删除字段
rename   修改表名
##########################################索引介绍
索引是给字段下面的值排队用的，类似于书的目录的链接
索引优点：加快查询速度
索引缺点：降低了数据维护速度，并且索引也需要占物理空间 
算法  Btree (二叉树)
show index from 表名;   查看索引的详细信息
#########################################primary key主键
        一个表中只能有一个primary key字段
        对应的字段不允许重复，不允许赋NULL值
        如果有多个字段都作为primary key，称为复合主键，必须一起创建一起删除
        主键字段的key标志是PRI
        通常与AUTO——INCREMENT连用
        自身理解：其实就是设置一定的限制，列如同表格内学号不能相同！
 create table t23( name char(10),stu_num char(9),primary key(stu_num));
 desc t23;
+---------+----------+------+-----+---------+-------+
| Field   | Type     | Null | Key | Default | Extra |
+---------+----------+------+-----+---------+-------+
| name    | char(10) | YES  |     | NULL    |       |
| stu_num | char(9)  | NO   | PRI | NULL    |       |
+---------+----------+------+-----+---------+-------+

#####################################复合主键（表中多个字段一起做主键）
create table t24( cip char(20),sport smallint(2),status enum("deny","allow"),primary key(cip,sport));
  desc t24;
+--------+----------------------+------+-----+---------+-------+
| Field  | Type                 | Null | Key | Default | Extra |
+--------+----------------------+------+-----+---------+-------+
| cip    | char(20)             | NO   | PRI | NULL    |       |
| sport  | smallint(2)          | NO   | PRI | NULL    |       |
| status | enum('deny','allow') | YES  |     | NULL    |       |
+--------+----------------------+------+-----+---------+-------+
mysql> select * from t24;
+---------------+-------+--------+
| cip           | sport | status |
+---------------+-------+--------+
| 192.168.4.252 |    60 | allow  |
| 192.168.4.252 |  3360 | allow  |
| 192.168.4.253 |  3360 | allow  |
| 192.168.4.254 |    80 | deny   |
+---------------+-------+--------+
          复合主键中：设置的那两主键不能同时同样出现，至少要更改一个 
          alter table t24 drop primary key;   删除主键
###################与AUTO_INCREMENT连用
          auto_increment 自动增长
          想要删除主键时，需要先删除自动增长才可以删除主键
########################################外键
          让当前表字段的值在另一个表中字段值的范围内选择
          使用条件
          表的存储引擎必须是innodb
          字段类型要一致
          被参照字段必须钥匙索引类型的一种（primary key）
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          






